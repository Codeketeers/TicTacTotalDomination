@using TicTacTotalDomination.Web.Helpers;

@{
    ViewBag.Title = "Index";
    Html.SetActivePage("Home");
}

@section HeadScripts
{
    @*The following if statement and its contents are not required and are only for intellisense because I'm lazy. *@
    @if (false)
    {
        <script src="@Url.Content("~/Scripts/jQuery.js")" type="text/javascript"></script>
    }

    <script type="text/javascript">
        var piece = 'X';

        function RenderBoard(data){
            $('#GameBoardContainer').empty().html(data); //I'm plugging the game board that we we're given into the page here.

            //Lets make sure we set up all the buttons/gizmos/etc. we just rendered.
            BindCellClick();
        }

        function BindCellClick() {
            $('.BoardCell').click(function (event) {
                var x = $(this).attr('data-x');
                var y = $(this).attr('data-y');
                var gameId = $('#hdnGameId').val();

                $.ajax({
                    url: '@Url.Action("Move", "Game")'
                    , datatype: 'html'
                    , data: {
                        x: x
                        , y: y
                        , gameId: gameId
                        , piece: piece
                    }
                    , success: function (data) {
                        RenderBoard(data);

                        piece = piece == 'X' ? 'Y' : 'X';
                    }
                });
            });
        }

        $('document').ready(function () {
            $('#btnStartGame').click(function (event) {
                $.ajax({
                    url: '@Url.Action("StartGame", "Game")'
                    , datatype: 'html' //Because we expect an html rendering of the game to result from this call
                    , data: { //Pay special atention to the action in the controller, these properties are going to bind to the method parameter.
                        PlayerOneName: 'Maverick'
                        , PlayerTwoName: 'Goose'
                        , PlayerMode: 'Local'
                        , NumberOfPlayers: 2
                    }
                    , success: function (data) {
                        RenderBoard(data);
                    }
                });
            });
        });
    </script>
}

<h2>Would you like to play a game?</h2>

<div class="row">
    <div class="span12">
        @using (Html.BeginForm("SignIn", "Home"))
        { 
            <input type="text" name="playerName" id="playerName" />
            <input type="submit" class="btn" value="Sign In"/>
        }
        @*<input type="button" id="btnStartGame" class="btn btn-success" value="Play"/>*@
    </div>
    <div class="span12">
        <input type="text" id="txtOpponentName" />
        <input type="button" class="btn" id="btnChallenge" value="Challenge" />
    </div>
</div>
<div class="row">
    <div class="span12" id="GameBoardContainer">
        <div id="GameBoard" style="width:97px;height:97px;padding:0px;">
            @*The real beauty of MVC is that we can use c# code to leverage building our views*@
            @for (int r = 0; r < 3; r++)
            {
                for (int c = 0; c < 3; c++)
                {
                    @*There are two things to notice here.
                        The first is that I used two C# for loops to build out the entire game board with one line of html.
                        The second is that I can bind to more than just view model properties.
                            Here I indicated the coordinates of each cell by binding to the fields of my for loop.
                    *@
                    <div class="BoardCell" data-x="@r" data-y="@c" style="width:30px;height:30px;float:left;border:1px solid black;margin:0px;padding:0px;">
                        <p></p>
                    </div>
                }
            }
        </div>
    </div>
</div>
